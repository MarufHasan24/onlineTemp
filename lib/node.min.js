const crypto=require("crypto"),fs=require("node:fs"),algorithm="aes-256-ecb",templatekey=Buffer.from("20eb74a29ce398e6dd4ea7b00bf1469b93c736657eed0ba16c79a8c796e97c51","hex");function writeFileOwn(e,t,i){let r=(new Date).toISOString();const l={createdAt:r,user:t,data:[],lastModified:r};fs.writeFile(e,JSON.stringify(l),(e=>{e||i()}))}function updateFileOwn(e,t,i){let r=__dirname+"/../../private/user/usr-"+encodeURIComponent(e)+".json",l=(new Date).toISOString();fs.stat(r,((n,a)=>{n?i(n):keepLog(e,"hosting",(e=>{e||fs.readFile(r,"utf8",((e,n)=>{if(e)i(e);else{const e=JSON.parse(n);e.lastModified=l,e.data.push(JSON.parse(t)),fs.writeFile(r,JSON.stringify(e),(e=>{e?i(e):i()}))}}))}),a)}))}function updateFile(e,t){fs.readFile(e,"utf8",((i,r)=>{if(i)t(i);else{const i="string"==typeof r?JSON.parse(r):r;t(null,i,((t,i)=>{fs.writeFile(e,JSON.stringify(t),(e=>{i(e||null)}))}))}}))}function readFile(e,t){fs.readFile(e,"utf8",((e,i)=>{e?t(e):t(null,JSON.parse(i))}))}function writeFile(e,t,i){fs.writeFile(e,t,{flag:"w+"},(e=>{i(e||null)}))}function deleteFile(e,t,i,r){fs.stat(e,((l,n)=>{l||keepLog(r,"delete",(i=>{i||fs.unlink(e,(function(e){e?t(e):t(null,{result:"Success"})}))}),{...n,key:i||null})}))}function uriEncript(e){const t=crypto.createCipheriv(algorithm,templatekey,null);let i=t.update(JSON.stringify(e),"utf8","hex");return i+=t.final("hex"),i}function uriDecript(e){const t=crypto.createDecipheriv(algorithm,templatekey,null);let i=t.update(e,"hex","utf8");return i+=t.final("utf8"),isValidJSON(i)}function isValidJSON(e){try{const t=JSON.parse(e);if("object"==typeof t&&null!==t)return t}catch(e){return!1}}function jsonToTable(e){let t='<table border="1" cellpadding="5">';if(Array.isArray(e))e.forEach((e=>{t+=`<tr><td>${jsonToTable(e)}</td></tr>`}));else for(const i in e)t+=`<tr><td><strong>${i}</strong></td><td>`,"object"!=typeof e[i]||Array.isArray(e[i])?Array.isArray(e[i])?(t+="<ul>",e[i].forEach((e=>{t+=`<li>${e}</li>`})),t+="</ul>"):t+=e[i]:t+=jsonToTable(e[i]),t+="</td></tr>";return t+="</table>",t}function generateTables(e){let t="";return Array.isArray(e)?e.forEach(((e,i)=>{t+=`<div class="table-container"><div><h3>Serial:${i+1}</h3>${jsonToTable(e)}</div></div>`})):t+=`<div class="table-container">${jsonToTable(e)}</div>`,t}function keepLog(e,t,i,r){let l={};if(r&&(r.atime&&(l["last access"]=r.atime),r.atime&&r.mtime&&r.atime!==r.mtime&&r.mtime&&(l["last modification"]=r.mtime),r.ctime&&(l["creation time"]=r.ctime),r.size&&(l.size=r.size),r.ip&&(l.ip=r.ip)),e){const r=new Date,n=`${__dirname}/../../private/log/log-${r.getFullYear()}-${r.getMonth()+1}.json`;fs.stat(n,((a,s)=>{a?writeFile(n,JSON.stringify([{user:e,action:t,data:l,date:r.toString()}]),(e=>{i(e||null)})):updateFile(n,((n,a,s)=>{n?i(n):(a.push({user:e,date:r.toString(),data:l,action:t}),s(a,(e=>{i(e||null)})))}))}))}else i(null)}module.exports={writeFileOwn:writeFileOwn,updateFileOwn:updateFileOwn,updateFile:updateFile,uriEncript:uriEncript,uriDecript:uriDecript,readFile:readFile,writeFile:writeFile,deleteFile:deleteFile,keepLog:keepLog,jsonToTable:generateTables,stat:fs.stat};